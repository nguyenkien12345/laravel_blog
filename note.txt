Khi tạo ra các migration phải lưu ý sắp sếp theo thứ tự quan hệ. (Vd migration categories và migration users phải được tạo trước migration posts)
---------------------------------------------------------------------------------------------------------------------
+ Có 2 cách thiết lập đa ngôn ngữ trong laravel
- 1 là dùng file php được tạo ra trong folder lang (tên key không được phép để khoảng trắng) => Hạn chế sử dụng
- 2 là dùng file json được tạo ra trong folder lang (tên key được phép để khoảng trắng) => Nên sử dụng
--------------------------------------------------------------------------------------------------------------------
Mỗi lần ta khai báo gì mới trong autoload thì phải chạy lệnh: composer dump-autoload => Để cho nó nạp vào
--------------------------------------------------------------------------------------------------------------------
Gửi Mail trong laravel
- Cấu hình môi trường trong file .env hoặc trong folder config\mail.php
- Chạy lệnh tạo: php artisan make:mail DemoEmail
- File sẽ xuất hiện trong app\Mail
--------------------------------------------------------------------------------------------------------------------
Hướng dẫn chạy lệnh queue trong laravel
php artisan queue:work --queue=email (php artisan queue:work là câu lệnh chạy. email là cái name của cái queue đó)
--------------------------------------------------------------------------------------------------------------------
- Facade (Bề mặt, mặt ngoài => Nó đại diện cho 1 cái gì đó => Cho phép chúng ta truy cập đến các hàm static bên trong các service)
- Alias (Định danh, bí danh) => Gán 1 cái facade cho 1 cái từ khóa nào đó để chúng ta khi sử dụng nó sẽ đơn giản hơn
Vào config => app => Dưới cùng sẽ có 1 mảng các array alias do chúng ta tự định nghĩa (Thay vì chúng ta phải gọi nguyên cái namespace thì chúng ta
chỉ cần gọi ra cái name của cái app ra (alias))

- Sau khi tạo ra 1 Facade thì phải đăng ký Facade đó vào trong app\Providers\AppServiceProvider trong hàm register
Luồng hoạt động:
- Khi ta gọi Facade Menu trong file blade.php (file giao diện) là thực chất ta đang gọi MenuFacede trong Folder Menu/MenuFacade.php
 và những phương thức trong MenuFacede này là khi mà mình đăng ký là nó đã nạp vào Menu/MenuFacade.php thông qua cái AppServiceProvider lúc ta đăng ký định nghĩa tên nó là
 menu vừa trong Menu/MenuFacade.php và AppServiceProvider
    Trong Menu/MenuFacade.php
    protected static function getFacadeAccessor(){
        return 'menu';
    }

    Trong AppServiceProvider
    $this->app->singleton('menu', function(){
        return new MenuManager();
    });
--------------------------------------------------------------------------------------------------------------------
Authentication trong laravel
- Cài thư viện authentication => composer require laravel/ui

- Chạy lệnh khởi tạo để sinh ra các file view và controller => php artisan ui:auth => Lúc này trong folder app/Http/Controllers
sẽ xuất hiện folder Auth kèm theo file HomeController nữa. Trong folder Auth này sẽ chứa các controller liên quan đến Authentication.
Đồng thời trong folder resources/views cũng sẽ xuất hiện folder auth chứa các file view liên quan đến Authentication kèm theo file home.blade.php,
Kèm theo folder layouts/app.blade.php
Tiếp đến trong folder routes/web.php sẽ sinh ra 2 dòng khai báo sau:
Auth::routes();
Route::get('/home', [App\Http\Controllers\HomeController::class, 'index'])->name('home');

- Cài thư viện bootstrap => php artisan ui bootstrap => Sau đó chạy: npm install => npm run dev và chạy đồng thời 1 terminal khác với lệnh
php artisan serve
--------------------------------------------------------------------------------------------------------------------
Để đăng nhập được vào hệ thống laravel chúng ta bắt buộc phải có guards và providers nằm trong config/auth.php
--------------------------------------------------------------------------------------------------------------------
Khi khởi tạo 1 file route mới chúng ta phải khai báo file route đó vào trong app/Providers/RouteServiceProvider nằm trong function boot
--------------------------------------------------------------------------------------------------------------------
Chạy câu lệnh cài Debugbar (Dùng để debug toàn bộ ứng dụng laravel (Ngoại trừ API))
- composer require barryvdh/laravel-debugbar --dev
- Sau khi cài Debugbar ta vào config/app.php -> Mục providers đoạn Package Service Providers -> Khai báo: Barryvdh\Debugbar\ServiceProvider::class
- Sau khi cài Debugbar ta vào config/app.php -> Mục aliases -> Khai báo: 'Debugbar' => Barryvdh\Debugbar\Facades\Debugbar::class
- Chạy lệnh: php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"
- Lúc này trong folder config sẽ xuất hiện file debugbar.php
--------------------------------------------------------------------------------------------------------------------
Chạy câu lệnh cài telescope (Dùng để debug các API)
- composer require laravel/telescope
- php artisan telescope:install
- php artisan migrate
- php artisan telescope:publish
- Gõ vào url: http://127.0.0.1:8000/telescope/requests (Nó sẽ hiển thị ra toàn bộ các request mà chúng ta đang request)
--------------------------------------------------------------------------------------------------------------------
Chạy câu lệnh cài laravel-ide-helper
- composer require --dev barryvdh/laravel-ide-helper
- php artisan vendor:publish --provider="Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider" --tag=config => Tạo ra 1 file _ide_helper.php trong folder config
- php artisan ide-helper:generate => Tạo ra 1 file _ide_helper.php ngang hàng với các folder như app, vendor, tests, public...
- php artisan ide-helper:models => Gõ no còn ko enter luôn vì mặc định là no
- php artisan ide-helper:meta
--------------------------------------------------------------------------------------------------------------------
Các phương thức Upload file
getClientSize('myFile')                 => Trả về dung lượng của file, tính theo bytes
getClientMimeType('myFile')             => Trả về kiểu của file: image/png
getClientOriginalName('myFile')         => Trả về tên của file
getClientOriginalExtension('myFile')    => Trả về đuôi của file :png
isValid('myFile')                       => Kiểm tra upload file có thành công hay không
dd('name_file: ' . $name_file . ' - ' .'extension_file: ' . $extension_file . ' - ' . 'size_file: ' . $size_file . ' - ' . 'mimeType_file: ' . $mimeType_file);
--------------------------------------------------------------------------------------------------------------------
Get Data Between Two Dates
use Carbon\Carbon;
use App\Models\User;

$date1 = '2021-09-04';
$date2 = '2021-09-10';

Cách 1
User::whereBetween('created_at', [
    $date1,
    $date2
])->count();
=> Trả ra các data có giá trị từ ngày 04 đến ngày 09 tháng 09 năm 2021

Cách 2
User::whereBetween('created_at', [
    $date1,
    Carbon::parse($date2)->endOfDay()
])->count();
=> Trả ra các data có giá trị từ ngày 04 đến ngày 10 tháng 09 năm 2021
--------------------------------------------------------------------------------------------------------------------
Validation
Viết trong controller: 'due_date' => 'required|date_format:Y-m-d'
Viết trong html: <input type="date" name="due_date" class="form-control">
Viết trong models (Trả về kiểu format mong muốn):

Ghi đè getDueDateAttribute của models
public function getDueDateAttribute($value){
    return Carbon::parse($value)->format('d-m-Y');
}

Ghi đè getCreatedAtAttribute của models
public function getCreatedAtAttribute($value){
    return Carbon::parse($value)->format('d-m-Y');
}
=> Khi ta hiển thị 2 field due_date, created_at thì nó sẽ tự động được format lại
--------------------------------------------------------------------------------------------------------------------
How to Check date is expired or not using php and count remaining days

$exp_date   = "2017/04/30";
$today_date = "2017/04/31";

// Convert to strtotime
$exp   = strtotime($exp_date);
$td    = strtotime($today_date);

// Compare
if($td > $exp){
    // count how many days
    $diff = $td - $exp;
    $x = abs(floor($diff / (60 * 60 *24)));
    echo "Product expire";
    echo "<br/> After Expire Days: ".$x;
}
else{
    $diff = $td - $exp;
    $x = abs(floor($diff / (60 * 60 *24)));
    echo "Product not expire";
    echo "<br/> Already Expire Days: ".$x;
}
--------------------------------------------------------------------------------------------------------------------
Làm ra Rule Check Time với Check Date trong laravel thông qua php artisan make:rule tên_rule
php artisan make:rule DateBetween
php artisan make:rule TimeBetween

START RULE DateBetween
public function passes($attribue, $value){
    $pickupDate = Carbon::parse($value);
    $lastDate   = Carbon::now()->addWeek();               // Lấy từ thời điểm hiện tại cộng thêm 7 ngày
    return $value >= now() && $value <= $lastDate;        // Ngày được chọn phải nằm trong khoảng thời gian hiện tại đến khoảng thời gian + 7 ngày
}

public function message(){
    return 'Please choose the date between a week from now';
}
END RULE DateBetween

START RULE TimeBetween
public function passes($attribue, $value){
    $pickupDate = Carbon::parse($value);
    $pickupTime = Carbon::createFromTime($pickupDate->hour, $pickupDate->minute, $pickupDate->second);
    // When time's restaurant is open and close
    $earliesTime = Carbon::createFromTimeString('17:00:00');
    $lastTime = Carbon::createFromTimeString('23:00:00');
    return $pickupTime->between($earliesTime, $lastTime) ? true : false;
}

public function message(){
    return 'Please choose the time between 17:00 - 23:00';
}
END RULE TimeBetween
--------------------------------------------------------------------------------------------------------------------
Hướng dẫn cách tạo mã QR Code
link website tham khảo: https://www.positronx.io/how-to-generate-various-qr-codes-in-laravel-application/
link youtube tham khảo: https://www.youtube.com/watch?v=sIwA9h57_dc
link website tham khảo: https://blog.tomosia.com/laravel-tao-ma-qr-trong-framework-laravel/ => Nên đọc
Cài đặt thư viện: composer require simplesoftwareio/simple-qrcode
--------------------------------------------------------------------------------------------------------------------
Component trong laravel
php artisan make:component Alert
Hệ thống sẽ tạo class trong thư mục app\View\Components và view trong thư mục resources\views\components

Sau khi tạo component xong phải đăng ký nó vào bên trong AppServiceProvider
use Illuminate\Support\Facades\Blade
Blade::component('package-alert', Alert::class); => Khai báo thằng này trong boot
// Trong đó: package-alert: Tên dùng để gọi component bên view
// Alert: Tên class Component

Gọi component
<x-alert />
Trong đó:
x: là cú pháp bắt buộc
alert: tên đã đăng ký ở Service Provider

Nếu class component nằm trong 1 thư mục con, hãy gọi theo cú pháp sau:
<x-inputs.button />
(Gọi component button nằm trong folder con inputs) => Cú pháp app\View\Components\Inputs\Button.php

<x-forms.button />
(Gọi component button nằm trong folder con forms) => Cú pháp app\View\Components\Forms\Button.php

Chúng ta có thể không cần đăng ký Component vào trong function boot của AppServiceProvider => Ta chỉ cần tại đứng tại file view mà chúng ta muốn hiển thị
component gõ đúng đường dẫn gọi đến file đó
VD: <x-inputs.button /> (Nghĩa là vào folder Inputs file button.blade.php (x) là cú pháp bắt buộc)
VD: <x-forms.button />  (Nghĩa là vào folder Forms file button.blade.php (x) là cú pháp bắt buộc)

Truyền dữ liệu vào component
<x-alert type="error" :message="$message" />
Dữ liệu được truyền vào giống thuộc tính của HTML. Nếu muốn biên dịch biến, ban cần thêm dấu : phía trước thuộc tính
Với các dữ liệu tĩnh (không phải biến trong laravel mà chỉ có mỗi nội dung string, number thì thuộc tính không cần thêm dấu : vào trước (VD: type="error"))
Với các dữ liệu động (là biến trong laravel thì thuộc tính cần thêm dấu : vào trước (VD: :message="$message"))

VD2: <x-alert type="warning" :text="$typeBooking" />

Lưu ý:
- Bạn cần đặt thuộc tính bên class component là public
- Nếu tên thuộc tính trong class component ở dạng camelCase => Khi gọi component cần chuyển thuộc tính thành dấu gạch ngang (-)
VD2: <x-alert type="warning" :text="$typeBooking" data-icon="facebook" />
Mặc dù bên component đang để tên biến là dataIcon nhưng khi truyền thuộc tính vào component bên view ta phải dùng snake cake không được dùng camelCase
--------------------------------------------------------------------------------------------------------------------
Mặc định, Laravel sẽ cache view vào trong folder: storage/framework/views
Khi có Request mới, Laravel sẽ kiểm tra xem file cache có tồn tại hoặc hết hạn
    - Nếu hết hạn hoặc không tồn tại: Hệ thống sẽ tạo bản cache mới
    - Nếu tồn tại và chưa hết hạn: Hệ thống sẽ giữ bản cache cũ cho đến khi hết hạn hoặc bị xóa
Laravel cung cấp cho chúng ta 2 Command Line để thuận tiện hơn cho lập trình viên trong quá trình phát triển ứng dụng
Cache View: php artisan view:cache
Clear Cache View: php artisan view:clear
--------------------------------------------------------------------------------------------------------------------
HTTP Response

return response()->json([
    'name' => 'Nguyễn Trung Kiên',
    'age' => 22,
    'school' => 'Hoa Sen University'
], 201)->header('Api-key', '1139110256')
Trả về data json kèm theo trạng thái trả về và header trả về

Nếu Route của bạn có tham số:
return redirect()->route('profile', ['id' => 1]);
Hoặc
return redirect(route('profile', ['id' => 1]));
--------------------------------------------------------------------------------------------------------------------
Trả về Response dạng Download File
--------------------------------------------------------------------------------------------------------------------
Tích hợp FCM vào laravel
- Vào Project Overview => Project settings => Cloud Messaging => Copy Server key (Chính là FCM key) và Sender ID
(Nếu không thấy Server key thì click vào dấu 3 chấm dọc trong mục Cloud Messaging API (Legacy) Disabled => Nhấn Manage API in Google Cloud Console
=> Nhấn ENABLE để sinh ra Server key và Sender ID)

- Thay cấu hình firebase mà ta setup dự án vào public\firebase-messaging-sw.js và trong script của file pushnotificationdemo/index.blade.php

- Thay Server key vào trong function sendNotification của file PushNotificationController.php
--------------------------------------------------------------------------------------------------------------------
OTP FIREBASE Laravel
Vào Authentication => Sign-in method => Phone => Click Enable => Click Save
Vào tiếp Settings => Mục Domains => Authorised domains => Click Add Domain => Gõ localhost
Các đường dẫn url sau này thay 127.0.0.1 bằng localhost
--------------------------------------------------------------------------------------------------------------------
Hướng dẫn tạo mã Captcha trong laravel (Tài liệu để follow theo: https://github.com/mewebstudio/captcha)
- composer require mews/captcha

- Lưu ý: Để sử dụng bất kỳ nhà cung cấp dịch vụ nào (Service Provider), chúng ta phải đăng ký nhà cung cấp dịch vụ (Service Provider)
khi khởi động ứng dụng Laravel của mình. Về cơ bản có hai cách để làm điều này.

- Vào folder config/app.php khai báo vào trong providers và aliases lần lượt như sau:
    'providers' => [
        // ...
        Mews\Captcha\CaptchaServiceProvider::class,
    ]

    'aliases' => [
        // ...
        'Captcha' => Mews\Captcha\Facades\Captcha::class,
    ]

- Để sử dụng cài đặt của riêng bạn, hãy xuất bản config: php artisan vendor:publish
Lúc này sẽ xuất hiện file captcha.php trong folder config (Ta sẽ thoải mái cấu hình file captcha tùy theo ý muốn)
- captcha_img() sẽ nhận các options (Key của mảng trong file captcha.php)
VD: captcha_img('math'), captcha_img('mini')
--------------------------------------------------------------------------------------------------------------------
Hướng dẫn Compress Image và Resize Image (Tài liệu để follow theo: https://image.intervention.io/v2/api/)
- composer require intervention/image

- Lưu ý: Để sử dụng bất kỳ nhà cung cấp dịch vụ nào (Service Provider), chúng ta phải đăng ký nhà cung cấp dịch vụ (Service Provider)
khi khởi động ứng dụng Laravel của mình. Về cơ bản có hai cách để làm điều này.

- Vào folder config/app.php khai báo vào trong providers và aliases lần lượt như sau:

    'providers' => [
        // ...
        Intervention\Image\ImageServiceProvider::class,
    ]

    'aliases' => [
        // ...
        'Image' => Intervention\Image\Facades\Image::class
    ]

- Để sử dụng cài đặt của riêng bạn, hãy xuất bản config: php artisan vendor:publish --provider="Intervention\Image\ImageServiceProviderLaravelRecent"
--------------------------------------------------------------------------------------------------------------------
Hướng dẫn sử dụng google translate (Tài liệu để follow theo: https://packagist.org/packages/stichoza/google-translate-php)
- composer require stichoza/google-translate-php
- Sử dụng cơ bản
use Stichoza\GoogleTranslate\GoogleTranslate;
$tr = new GoogleTranslate('en'); // Translates into English (Dịch sang tiếng Anh)

- Hoặc bạn có thể thay đổi ngôn ngữ sau
$tr = new GoogleTranslate(); // Translates to 'en' from auto-detected language by default (Dịch sang 'en' từ ngôn ngữ được phát hiện tự động theo mặc định)
$tr->setSource('en'); // Translate from English (Dịch từ tiếng Anh)
$tr->setSource(); // Detect language automatically (Tự động phát hiện ngôn ngữ)
$tr->setTarget('ka'); // Translate to Georgian (Dịch sang tiếng Gruzia)

- Debug:
echo  $tr>setSource('in')->setTarget('in')->translate('Tạm biệt'); (Dịch từ ngôn ngữ nào sang ngôn ngữ nào)

Tài liệu các ký hiệu ngôn ngữ
https://cloud.google.com/translate/docs/languages
--------------------------------------------------------------------------------------------------------------------
Hướng dẫn sử dụng ShortURL (Tài liệu để follow theo: https://packagist.org/packages/shorturl/shorturl)
- composer require shorturl/shorturl
- Sử dụng cơ bản
use ShortURL\ShortURL\Shorten;
$shorten = new Shorten();
echo $shorten->text('https://google.com');
--------------------------------------------------------------------------------------------------------------------
How to restrict or block user access from ip address in laravel (Cách hạn chế hoặc chặn quyền truy cập của người dùng từ địa chỉ ip trong laravel)
- Tạo 1 middleware để thực hiện việc này => php artisan make:middleware NameOfMiddleware
- Vào app/Http/Kernel.php để khai báo middleware này vào trong mục $middlewareGroups phần web và phần api
--------------------------------------------------------------------------------------------------------------------
How To Get Location Information With IP Address In Laravel (Tài liệu để follow theo: https://github.com/stevebauman/location)
- composer require stevebauman/location

- Lưu ý: Để sử dụng bất kỳ nhà cung cấp dịch vụ nào (Service Provider), chúng ta phải đăng ký nhà cung cấp dịch vụ (Service Provider)
khi khởi động ứng dụng Laravel của mình. Về cơ bản có hai cách để làm điều này.

- Vào folder config/app.php khai báo vào trong providers và aliases lần lượt như sau:

    'providers' => [
        // ...
        Stevebauman\Location\LocationServiceProvider::class
    ]

    'aliases' => [
        // ...
        'Location' => Stevebauman\Location\Facades\Location::class,
    ]

- Để sử dụng cài đặt của riêng bạn, hãy xuất bản config: php artisan vendor:publish
--------------------------------------------------------------------------------------------------------------------
Kiểm tra hệ điều hành, trình duyệt, thiết bị đang chạy trong laravel (Operating system browser and device detection in laravel)
(Tài liệu để follow theo: https://packagist.org/packages/hisorange/browser-detect)

- composer require hisorange/browser-detect
--------------------------------------------------------------------------------------------------------------------
Cách tạo 1 token trong laravel
- Khi đăng nhập thành công (nhập tài khoản và mật khẩu hợp lệ) thì ta tạo token thông qua hàm createToken
- createToken nhận vào 1 tham số chính là name mà ta đặt tên cho token đó
- plainTextToken: Lấy token đó ra và trả về
-Token này sẽ được sinh ra trong bảng personal_access_tokens
$token = $user->createToken('authToken')->plainTextToken;

Cách lấy ra thông tin của token hiện tại
- auth()->user()-currentAccessToken()

Cách xóa token
public function logout(){
    // Cách 1
    // Xóa tất cả các token (phiên đăng nhập) liên quan đến user (hiện tại) đang thực hiện đăng nhập
    auth()->user()-tokens()->delete();

    // Cách 2
    // Xóa cái token (phiên đăng nhập) gần nhất (mới nhất) liên quan đến user (hiện tại) đang thực hiện đăng nhập
    auth()->user()-currentAccessToken()->delete();

    // Cách 3
    // Xóa cái token được chỉ định
    auth()->user()->tokens()->where('id', $tokenId)->delete();
}
--------------------------------------------------------------------------------------------------------------------
Events là 1 hành động hay là 1 tác vụ nào đó xảy ra ở 1 thời điểm nhất định. Trong đời thường cũng như trong quá trình hoạt động của 1 ứng dụng thì có nhiều
cái event xảy ra

Cách tạo event và listener
- php artisan make:event PodcastProcessed
- php artisan make:listener SendPostcastProcessed --event=PodcastProcessed
 (--event=PodcastProcessed: Khi chúng ta tạo listen thì mặc định nó sẽ tiêm cái thằng event này vào trong cái hàm handle)

 Vd về cách gọi event:
 Cách 1
Route::get('/', function () {
    event(new \App\Events\PodcastProcessed());
    return view('welcome');
});

 Cách 2
Route::get('/', function () {
    \App\Events\DemoEvent::dispatch('Mai Thị Thanh Thúy', '23');
    return view('welcome');
});
--------------------------------------------------------------------------------------------------------------------
Sự khác biệt giữa middleware và gate
- middleware dùng để kiểm tra đầu vào và điều hướng request là có được phép đi tiếp hay không, nếu hợp lệ thì cho đi tiếp. Thường áp dụng cho nhóm route
- gate dùng để kiểm tra đầu vào và điều hướng request là có được phép đi tiếp hay không, nếu hợp lệ thì cho đi tiếp còn khi đi đến đó
có được phép thực hiện hay không thì gate sẽ quyết định. Thường sẽ chỉ được sử dụng ỏ tầng controller (Không liên quan đến 1 model cụ thể nào)
Thường áp dụng riêng lẻ cho từng route
Thường phần Authorization sẽ được khai báo trong App\Provider\ServiceProvider

Sự khác biệt giữa gate và policy
- gate và policy đều là phân quyền và cho phép là hành động nào được phép thực hiện, hành động nào không được phép thực hiện
- gate là  các cái class do ta tự khai báo
- policy là các cái class có sẵn được tích hợp trong laravel. Thường dùng lệnh cmd để tạo ra. Quản lý những logic mà trong
cái việc phân quyền liên quan đến model gắn liền với model cụ thể
- Giống như thằng gate thì policy cũng nhận tham số đầu tiên là thằng user. Mặc định là tham số user luôn luôn được truyền vào rồi nên ta không cần truyền vào nữa
- gate với policy nó cũng như route vậy cũng có phương thức resource để quản lý các phương thức CRUD
- policy thực chất vẫn là gate

Câu lệnh tạo policy:
- php artisan make:policy CommentPolicy --model=Comment_Authorization (Tạo ra policy để sử dụng riêng cho model Comment_Authorization)
- Sau khi tạo policy xong thì ta sẽ khai báo nó vào trong App\Provider\AuthServiceProvider
Gate::resource('comments', 'CommentPolicy'); // truyền vào tên policy (ta tự đặt tên) và CommentPolicy mà chúng ta tạo
- Tìm đến nơi khai báo protected $policies = []; và khai báo cái model kèm với policy tương ứng của model đó
VD:
protected $policies = [
    Comment::class => CommentPolicy::class
];

Cách sử dụng can và cannot trong hiển thị danh sách ở file view
// Những comment nào mà có user id trùng với user id của người dùng đang đăng nhập thì mới hiển thị ra chữ EDIT
@foreach($comments as $comment)
    <tr>
        <td scope='row'>{{ $comment->id }}</td>
        <td>{{ $comment->content }}</td>
        <td>{{ $comment->note }}</td>
        <td>
            @can('update', $comment)
                <a href="{{ route('comment.edit',$comment->id ) }}">EDIT</a>
            @endcan
        </td>
    </tr>
@endforeach
--------------------------------------------------------------------------------------------------------------------
Ghi nhận login logout trong laravel
- Khai báo event vs listener cho 2 sự kiện login và logout
- Sau đó vào vendor -> laravel -> ui -> auth-backend -> AuthenticatesUsers.php
- Đối với event login => Tìm đến protected function authenticated(Request $request, $user){} => Sau đó gọi cái event của login vào như sau:
protected function authenticated(Request $request, $user){
    event(new LoginEvent($user->name, $user->email, $user->mobile));
}

- Đối với event logout => public function logout(Request $request){} => Sau đó gọi cái event của logout vào
--------------------------------------------------------------------------------------------------------------------
How To Secure Laravel Website From Hackers
1) Vào file .env chỉnh biến APP_DEBUG từ false thành true

2) Thêm đoạn code sau vào config/app.php (nên để dưới cùng): Nó sẽ chuyển toàn bộ value của các key thành dấu *
'debug_blacklist' => [
    '__COOKIE' => array_keys($__COOKIE),
    '__SERVER' => array_keys($__SERVER),
    '__ENV' => array_keys($__ENV),
]
--------------------------------------------------------------------------------------------------------------------
Hướng dẫn Task Scheduling và cronjob trong Laravel (https://laravel.com/docs/9.x/scheduling)
- Trong Console/Commands: Tạo ra từng file riêng cho từng cái Task Scheduling. Mỗi 1 cái Task Scheduling chỉ tương ứng duy nhất với 1 file php duy nhất.
- Tất cả các file php này bắt buộc phải nằm trong Console/Commands
VD: Task Scheduling chạy gửi email thì viết 1 file riêng
    Task Scheduling chúc mừng sinh nhật thì viết 1 file riêng
    Task Scheduling gửi thông báo thì viết 1 file riêng
- Trong từng file này chúng ta đều phải tạo ra 1 chữ ký riêng biệt (duy nhất, không được phép trùng lặp) thông qua protected $signature = "tên_chu_ky:cron". Luôn kết thúc với prefix :cron.
Trong từng file này nó sẽ chạy logic thông qua hàm handle. Tất cả logic xử lý Task Scheduling sẽ nằm trong hàm handle của
file php
- Để quyết định xem những Task Scheduling nào sẽ được chạy thì chúng ta sẽ vào trong app/Console/Kernel.php và khai báo nó vào trong protected function schedule(Schedule $schedule) {}.
Chúng ta sẽ dựa vào cái chữ ký này để quyết định xem Task Scheduling nào sẽ được chạy.

1) php artisan schedule:list
Hiển thị ra toàn bộ tất cả các Task Scheduling mà chúng ta đã lên lịch để chạy

2) php artisan make:command Category --command=category:cron
                         (tên file command)    (tên và tác vụ cần làm)

3) Vào app/Console/Kernel:
protected function schedule(Schedule $schedule)
{
    $schedule->command('inspire')->withoutOverlapping()->hourly();
}
Gắn câu lệnh chạy cronjob vào
vd:  $schedule->command('inspire')->withoutOverlapping()->hourly();
Trong đó:
- inspire chính là $signature được khai báo trong file command mà ta thực thi chạy cronjob
- withoutOverlapping(): Không trùng lặp dữ liệu
- hourly(): Chạy từng giờ
(ta sẽ gắn cái signature được khai báo trong file command và thời gian chạy cho cronjob vào hàm schedule trong app/Console/Kernel)

4) php artisan schedule:work

Lưu ý: nếu muốn chạy câu lệnh trực tiếp luôn thì gõ: php artisan signature
vd: php artisan category:cron
--------------------------------------------------------------------------------------------------------------------
Tăng tốc độ website bằng cách cache response trong laravel (Tài liệu: https://github.com/spatie/laravel-responsecache)
1) composer require spatie/laravel-responsecache

2) php artisan vendor:publish --provider="Spatie\ResponseCache\ResponseCacheServiceProvider"

3) Lúc này trong folder config sẽ xuất hiện file responsecache.php
Ta sẽ chỉ cần chú ý đến 2 dòng:
'enabled' => env('RESPONSE_CACHE_ENABLED', true),
'cache_store' => env('RESPONSE_CACHE_DRIVER', 'file'),

4) Ta sẽ vào file .env thêm vào 2 dòng sau:
RESPONSE_CACHE_ENABLED=true
RESPONSE_CACHE_DRIVER=file

5) Vào Http\Kernel.php =>
Thêm dòng khai báo sau vào $middlewareGroups
protected $middlewareGroups = [
'web' => [
    ...
    \Spatie\ResponseCache\Middlewares\CacheResponse::class,
],

Thêm dòng khai báo sau vào $routeMiddleware
protected $routeMiddleware = [
   ...
   'doNotCacheResponse' => \Spatie\ResponseCache\Middlewares\DoNotCacheResponse::class,
    'cacheResponse' => \Spatie\ResponseCache\Middlewares\CacheResponse::class,
];


6) php artisan responsecache:clear

7)  cache this route for 5 minutes
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:300');
--------------------------------------------------------------------------------------------------------------------
Tự tạo file Log Riêng:
- Vào config/logging.php và khai báo như đoạn code bên dưới:
'post_history' => [
        'driver' => 'daily',
        'path' => storage_path('logs/post_history.log'),
        'level' => 'debug',
        'days' => 0,
        'permission' => 777,
],
- Và sau đó chỉ cần ghi những thông tin bạn mong muốn vào function cần xử lý ví dụ:
public function ceaterPost(Request $request)
{
    $data = $request->all();
    $newPost = Post::create($data);
    if(!newPost) {
        Log::channel('post_history')->info($this->getDataLog($request, $data);
    }
    return response('success', 200);
}
- Trong trường hợp xảy ra lỗi thì trong file log sẽ sinh ra 1 file post_history.log và chứa trong tin của $data.
- Các nhật ký lỗi được ghi nhận với 8 cấp độ khác nhau theo tiêu chuẩn RFC 5424:
emergency, alert, critical, error, warning, notice, info và debug.
(khẩn cấp, cảnh báo, quan trọng, lỗi, cảnh báo, thông báo, thông tin và gỡ lỗi)
Log::emergency($message);
Log::alert($message);
Log::critical($message);
Log::error($message);
Log::warning($message);
Log::notice($message);
Log::info($message);
Log::debug($message);
- Trong quá trình ghi log, bạn muốn ghi thêm các thông tin khác để tăng cường thông tin ngữ cảnh của lỗi,
các phương thức của facade Log ở trên đều có tham số thứ hai là một mảng thông tin. Ví dụ:
Log::info('Create post fail.', ['id' => $post->id, 'user_id' => $user->id]);
- Laravel có một abstraction layer bao phủ thư viện Monolog, mặc định một file log được lưu trong thư mục storage/logs.
Bạn hoàn toàn có thể ghi log vào đây sử dụng facade Log:
<?php

namespace App\Http\Controllers;

use App\User;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;

class UserController extends Controller
{
    /**
     * Show the profile for the given user.
     *
     * @param  int  $id
     * @return Response
     */
    public function showProfile($id)
    {
        Log::info('Showing user profile for user: '.$id);

        return view('user.profile', ['user' => User::findOrFail($id)]);
    }
}
--------------------------------------------------------------------------------------------------------------------
Tạo ra view riêng cho mã lỗi HTTP
- Laravel cho phép tạo ra các trang thông báo lỗi riêng tương ứng với các mã lỗi. Ví dụ, nếu bạn muốn cá nhân hóa trang báo lỗi 404
"Không tìm thấy trang web" bạn có thể tạo view resources/views/errors/404.blade.php. View này sẽ được sử dụng khi lỗi 404 phát sinh trong ứng dụng.
Các view trong thư mục này cần được đặt tên tương ứng với mã lỗi HTTP.
Một instance của HttpException sẽ được truyền đến view trong biến $exception khi hàm abort được gọi đến.
<h1>{{ $exception->getMessage() }}</h1>
--------------------------------------------------------------------------------------------------------------------
HTTP Exception
- Một số các exception tương ứng với một mã lỗi HTTP, ví dụ như lỗi "Trang không tìm thấy" tương ứng với mã lỗi 404
hay lỗi "Không được cấp quyền truy nhập" tương ứng với 401... Trong ứng dụng, phương thức abort giúp bạn tạo ra các exception này:
abort(404);
- Helper abort sẽ ngay lập tức bung ra một exception, phương thức này cũng nhận một chuỗi text để hiển thị cho mã lỗi tương ứng.
abort(403, 'Unauthorized action.');
--------------------------------------------------------------------------------------------------------------------
Hướng dẫn Laravel Exel pacakge xuất dữ liệu sang XLS, CSV và PDF (Tài liệu tham khảo: https://laravel-excel.com/)
- B1: composer require maatwebsite/excel
- B2: Vào config/app.php
'providers' => [
    /*
     * Package Service Providers...
     */
    Maatwebsite\Excel\ExcelServiceProvider::class,
]
- B3: Vào config/app.php
'aliases' => [
    ...
    'Excel' => Maatwebsite\Excel\Facades\Excel::class,
]
- B4: Chạy lênh: php artisan make:export ExportName --model=ModelExportName
VD: php artisan make:export UsersExport --model=User
=> Tạo thành công file quản lý việc xuất dữ liệu
Để Download được file PDF phải cài thêm: composer require barryvdh/laravel-dompdf
- B5: Chạy lênh: php artisan make:import ImportName --model=ModelImportName
VD: php artisan make:import UsersExport --model=User
=> Tạo thành công file quản lý việc nhập dữ liệu
--------------------------------------------------------------------------------------------------------------------
Laravel Scout
B1: Chạy lệnh: composer require laravel/scout
B2: Chạy lệnh: php artisan vendor:publish --provider="Laravel\Scout\ScoutServiceProvider"
B3: Khai báo trait Laravel\Scout\Searchable vào model bạn mong muốn có thể tìm kiếm được.
Trait này sẽ tạo 1 model observer để liên tục đồng bộ hóa model với driver tìm kiếm.
VD:
<?php

namespace App;

use Laravel\Scout\Searchable;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    use Searchable;
}
B4: Chạy lệnh: composer require algolia/algoliasearch-client-php
Bắt buộc cài driver Algolia. Nó sẽ trả ra kết quả theo thời gian thực
Với driver Algolia, bạn phải chỉnh id và secret lấy từ Algolia của bạn (và nhân tiện, Algolia cho phép dùng thử free 14 ngày).
Vào https://www.algolia.com/ đăng ký tài khoản => Sau khi đăng ký tài khoản xong tại trang chủ của algolia => Tại thanh sidebar vào Settings
=> API Keys => Lúc này ta sẽ copy Application ID và Admin API Key
Lúc này trong file env ta sẽ tạo ra 2 biến ALGOLIA_APP_ID và ALGOLIA_SECRET và gắn lần lượt Application ID và Admin API Key cho 2 biến này
ALGOLIA_APP_ID=6OG8BEMEYU
ALGOLIA_SECRET=9aa9f2fbb0c399cd417db55418bb8196
Tài liệu tham khảo https://viblo.asia/p/laravel-scout-eW65GAYLZDO
--------------------------------------------------------------------------------------------------------------------
Gói hỗ trợ icon (hình ảnh tất cả các quốc gia) (Tài liệu tham khảo: https://github.com/MohmmedAshraf/blade-flags)
B1: composer require outhebox/blade-flags
B2: php artisan vendor:publish --tag=blade-flags-config
Cách sử dụng:
+ Đối với cờ quốc gia:
<x-flag-country-br />
<x-flag-country-cn />
<x-flag-country-gb />
<x-flag-country-ru />
<x-flag-country-us />

+ Đối với cờ ngôn ngữ:
<x-flag-language-en />
<x-flag-language-ar />
<x-flag-language-es />

Bạn cũng có thể truyền các lớp cho các thành phần biểu tượng của mình:
<x-flag-country-us class="w-6 h-6"/>
<x-flag-language-es class="w-8 h-8" />

Nếu bạn muốn sử dụng các biểu tượng SVG thô làm nội dung, bạn có thể xuất bản chúng bằng cách sử dụng:
php artisan vendor:publish --tag=blade-flags --force
Sau đó, sử dụng chúng trong chế độ xem của bạn như:
<img src="{{ asset('vendor/blade-flags/country-us.svg') }}" width="32" height="32"/>
<img src="{{ asset('vendor/blade-flags/language-en.svg') }}" width="32" height="32"/>
--------------------------------------------------------------------------------------------------------------------
+ Laravel Model JSON là một gói cho phép bạn dễ dàng xuất dữ liệu từ các mô hình cụ thể trong ứng dụng Laravel của bạn sang định dạng JSON.
Nó dựa trên lệnh php artisan và cung cấp nhiều tùy chọn khác nhau để tùy chỉnh quy trình xuất.
+ Tài liệu tham khảo: https://github.com/vildanbina/laravel-model-json
+ Youtube tham khảo: https://www.youtube.com/watch?v=1DvN0C-3mZw
+ Cài đặt: composer require vildanbina/laravel-model-json

+ Lệnh xuất dữ liệu từ một mô hình là php artisan model:export {model}. Trong đó {model} là tên lớp của mô hình mà bạn muốn xuất.
Sau khi chạy lệnh này, dữ liệu sẽ tự động được lưu vào thư mục storage/app.
Ví dụ: Để xuất dữ liệu từ mô hình User, bạn sẽ chạy lệnh sau:
C1: php artisan model:export User
C2: php artisan model:export App\Models\User

+ Gói này cũng có một số tùy chọn cho phép bạn tùy chỉnh chức năng xuất.

VD: bạn có thể sử dụng --path=public tùy chọn lưu dữ liệu JSON vào một thư mục khác.
php artisan model:export User --path=public

VD: bạn có thể sử dụng --filename=data tùy chọn lưu trữ tên tệp theo ý muốn.
php artisan model:export User --filename=data

VD: Bạn cũng có thể loại trừ các cột nhất định khỏi quá trình xuất bằng cách sử dụng --except-fields.
Điều này hữu ích nếu bạn chỉ muốn xuất một số dữ liệu nhất định từ mô hình.
php artisan model:export User --except-fields=id,deleted_at

VD: Để loại trừ các cột created_at, updated_atvà deleted_atkhỏi xuất, hãy sử dụng --without-timestamps
php artisan model:export User --without-timestamps

VD: Nếu một mô hình có nhiều cột và bạn chỉ muốn xuất một tập hợp con của chúng, bạn có thể sử dụng --only-fields
Điều này cho phép bạn chỉ định cột nào bạn muốn đưa vào xuất.
php artisan model:export User --only-fields=name,email

Lệnh model:import cho phép bạn nhập dữ liệu từ tệp JSON và lưu trữ nó trong cơ sở dữ liệu của bạn.
Ví dụ để nhập dữ liệu cho mô hình User, bạn sẽ chạy lệnh sau:
VD1: php artisan model:import User public/Users.json
VD2: php artisan model:import User Users.json
Trong đó:
model: Tên của mô hình được nhập khẩu.
path: Đường dẫn đến tệp JSON phải chứa dữ liệu JSON hợp lệ.
=> Lệnh này sẽ lưu trữ tất cả dữ liệu được tìm thấy trong tệp JSON vào trong cơ sở dữ liệu.
--------------------------------------------------------------------------------------------------------------------
Thông báo đẩy OneSignal cho Laravel
Tài liệu tham khảo: https://github.com/berkayk/laravel-onesignal
Tài liệu tham khảo: https://www.positronx.io/laravel-onesignal-send-web-push-notification-tutorial/
--------------------------------------------------------------------------------------------------------------------
Thông báo đẩy với Push.js
Tài liệu tham khảo:
- https://pushjs.org/docs/introduction
- https://github.com/Nickersoft/push.js/

